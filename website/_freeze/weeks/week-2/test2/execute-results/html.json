{
  "hash": "edb007d3be018b3274f04ea9ca6fa2a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Design Variables and the Grammar of Graphics\"\nsubtitle: \"SMM635 - Week 2\"\nauthor: \"Prof. Simone Santoni\"\ninstitute: \"Bayes Business School\"\nformat:\n  revealjs:\n    theme: [default, ../../theme.scss]\n    slide-number: true\n    chalkboard: true\n    preview-links: auto\n    logo: ../../imgs/module-icon-light.svg\n    footer: \"SMM635 - Data Visualization | Week 2\"\n    margin: 0.1\n    transition: slide\n    background-transition: fade\n    incremental: false\n    smaller: true\n    scrollable: true\n    css: presentation-styles.css\n---\n\n## Today's Journey\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Part 1: Grammar of Graphics**\n\n- Framework & Philosophy\n- Core Components\n- Building Blocks\n:::\n\n::: {.column width=\"50%\"}\n**Part 2: Visual Forms**\n\n- Univariate Charts\n- Bivariate Charts  \n- Multivariate Charts\n:::\n::::\n\n---\n\n## Learning Objectives\n\nBy the end of today's session, you will:\n\n1. **Understand** the grammar of graphics framework\n2. **Map** data to visual variables effectively  \n3. **Build** complex visualizations from simple components\n4. **Implement** layered graphics approaches\n5. **Create** appropriate charts for different data types\n\n---\n\n## Part 1: Grammar of Graphics {background-color=\"#ffffff\"}\n\n### Moving Beyond Chart Types\n\n---\n\n## What is a Grammar? \n\n> \"Grammar makes language expressive. A language consisting of words and no grammar expresses only as many ideas as there are words.\" - Leland Wilkinson\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Traditional Approach:**\n\n- Pie chart\n- Bar chart\n- Line chart\n- Scatter plot\n:::\n\n::: {.column width=\"50%\"}\n**Grammar Approach:**\n- Data\n- Aesthetics\n- Geometries\n- Scales\n- Coordinates\n:::\n::::\n\n---\n## The Power of Grammar\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data) +\n  geom_bar() +\n  coord_polar()  # Bar chart â†’ Pie chart!\n```\n:::\n\n\n## The Power of Grammar\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Traditional thinking\nmake_pie_chart(data)\nmake_bar_chart(data)\n\n# Grammar thinking\nggplot(data) +\n  geom_bar() +\n  coord_polar()  # Bar chart â†’ Pie chart!\n```\n:::\n\n::: {.callout-note}\nA pie chart is just a stacked bar chart in polar coordinates! ðŸ¤¯\n:::\n\n---\n\n## Core Components of the Grammar\n\n::: {.incremental}\n1. **DATA**: What we want to visualize\n2. **AESTHETICS**: How we map data to visual properties\n3. **GEOMETRIES**: The visual marks we use\n4. **SCALES**: How we translate data to visual space\n5. **COORDINATES**: The space we're working in\n6. **FACETS**: Creating small multiples\n7. **THEMES**: Overall visual appearance\n:::\n\n---\n\n## 1. Data: The Foundation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data is structured information\nsales_data <- data.frame(\n  month = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n  revenue = c(45000, 52000, 48000, 61000),\n  region = c(\"North\", \"North\", \"South\", \"South\")\n)\n```\n:::\n\n\n::: {.callout-tip}\nGood visualization starts with well-structured data\n:::\n\n---\n\n## 2. Aesthetics: Visual Mappings\n\n### Mapping Data â†’ Visual Properties\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Data Variables**\n- Continuous values\n- Categories\n- Ordered factors\n- Time series\n:::\n\n::: {.column width=\"50%\"}\n**Visual Variables**\n- Position (x, y)\n- Size\n- Color\n- Shape\n- Transparency\n- Line type\n:::\n::::\n\n---\n\n## Visual Variables in Action\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(\n  x = date,        # Position\n  y = sales,       # Position\n  color = region,  # Color\n  size = profit    # Size\n)) + \n  geom_point()\n```\n:::\n\n\n![](images/visual-variables.png)\n\n---\n\n## 3. Geometries: Visual Marks\n\n::: {.panel-tabset}\n\n### Points\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_point()\n```\n:::\n\nBest for: Scatter plots, distributions\n\n### Lines\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_line()\n```\n:::\n\nBest for: Trends, time series\n\n### Bars\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_bar()\n```\n:::\n\nBest for: Comparisons, counts\n\n### Areas\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_area()\n```\n:::\n\nBest for: Proportions over time\n\n:::\n\n---\n\n## 4. Scales: Data to Visual Space\n\nScales control how data values are mapped to visual values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Linear scale (default)\nscale_y_continuous()\n\n# Log scale\nscale_y_log10()\n\n# Color scales\nscale_color_gradient(low = \"blue\", high = \"red\")\nscale_color_manual(values = c(\"#FF0000\", \"#0000FF\"))\n```\n:::\n\n\n---\n\n## 5. Coordinates: The Canvas\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Cartesian** (default)\n\n::: {.cell}\n\n```{.r .cell-code}\ncoord_cartesian()\ncoord_flip()\n```\n:::\n\n\n**Polar**\n\n::: {.cell}\n\n```{.r .cell-code}\ncoord_polar()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n**Geographic**\n\n::: {.cell}\n\n```{.r .cell-code}\ncoord_map()\n```\n:::\n\n\n**Transformed**\n\n::: {.cell}\n\n```{.r .cell-code}\ncoord_trans()\n```\n:::\n\n:::\n::::\n\n---\n\n## Building Complex from Simple\n\n::: {.incremental}\n1. Start with data\n2. Map to aesthetics\n3. Choose geometry\n4. Add layers\n5. Adjust scales\n6. Transform coordinates\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Layer by layer construction\np <- ggplot(data, aes(x, y))\np <- p + geom_point()\np <- p + geom_smooth()\np <- p + facet_wrap(~category)\n```\n:::\n\n\n---\n\n## Layering: The Power of Composition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(date, unemploy)) +\n  geom_area(alpha = 0.3) +           # Layer 1: Area\n  geom_line(size = 1.2) +            # Layer 2: Line\n  geom_smooth(se = FALSE, col = \"red\") # Layer 3: Trend\n```\n:::\n\n\nEach layer adds information without obscuring previous layers\n\n---\n\n## Part 2: Visual Forms {background-color=\"#A23B72\"}\n\n### From Simple to Complex\n\n---\n\n## Univariate Charts\n\n### Exploring Single Variables\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Continuous Data**\n- Histograms\n- Density plots\n- Box plots\n- Violin plots\n:::\n\n::: {.column width=\"50%\"}\n**Categorical Data**\n- Bar charts\n- Pie charts\n- Waffle charts\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}