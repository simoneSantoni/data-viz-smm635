---
title: "Project Tips & Resources"
---

## Getting Started

### 1. Finding the Right Dataset

**What makes a good dataset for visualization?**
- Multiple variables (quantitative and categorical)
- Temporal or spatial components
- Sufficient observations for meaningful patterns
- Clean enough to use, messy enough to be interesting
- Tells a story you care about

**Where to find datasets:**
- See our [data sources list](course-links.html#data-sources)
- Your own research or work (with permission)
- APIs from services you use
- Web scraping (check robots.txt)
- Government open data portals

### 2. Initial Exploration

Always start with exploratory data analysis:

```python
# Quick data overview
import pandas as pd
df = pd.read_csv('your_data.csv')
print(df.info())
print(df.describe())
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Quick visualizations
import matplotlib.pyplot as plt
df.hist(figsize=(12, 8))
plt.tight_layout()
plt.show()
```

### 3. Sketching Ideas

::: {.callout-tip}
## Paper First!
Sketch at least 5 different visualization approaches on paper before coding. This helps you:
- Think through the story
- Identify required data transformations  
- Plan interactive elements
- Save time overall
:::

## Design Best Practices

### Color Selection
1. **Start with grayscale** - Ensure it works without color
2. **Use color purposefully** - Highlight, group, or encode
3. **Check accessibility** - Use colorblind-safe palettes
4. **Be consistent** - Same color = same meaning

### Typography
- **Hierarchy**: Use size and weight to guide the eye
- **Readability**: Sans-serif for screens, adequate size
- **Consistency**: Maximum 2 font families
- **Labels**: Direct labeling > legends when possible

### Layout Principles
- **Visual hierarchy**: Most important elements prominent
- **White space**: Let visualizations breathe
- **Alignment**: Create clean sight lines
- **Balance**: Distribute visual weight evenly

## Technical Tips

### Performance Optimization

For large datasets:
```python
# Sampling for development
df_dev = df.sample(n=10000, random_state=42)

# Aggregation before plotting
df_agg = df.groupby('category').agg({
    'value': ['mean', 'std', 'count']
}).reset_index()

# Use efficient libraries
import datashader as ds  # For millions of points
import vaex  # For out-of-core computation
```

### Interactive Features

Start simple, add complexity:
1. **Hover tooltips** - Show details on demand
2. **Filtering** - Let users focus on subsets
3. **Zooming/panning** - Explore dense regions
4. **Linked views** - Coordinate multiple charts
5. **Animations** - Show change over time

### Deployment Options

For sharing your work:
- **Static**: GitHub Pages, Netlify
- **Python apps**: Streamlit, Dash, Heroku
- **R apps**: Shiny, shinyapps.io
- **Notebooks**: Binder, Google Colab
- **Dashboards**: Tableau Public, Observable

## Project Management

### Version Control
```bash
# Initialize git repository
git init
git add .
git commit -m "Initial project setup"

# Create .gitignore
echo "data/large_file.csv" >> .gitignore
echo "*.pyc" >> .gitignore
echo ".DS_Store" >> .gitignore
```

### Project Structure
```
my_project/
â”œâ”€â”€ README.md           # Project description
â”œâ”€â”€ data/              
â”‚   â”œâ”€â”€ raw/           # Original data
â”‚   â””â”€â”€ processed/     # Cleaned data
â”œâ”€â”€ notebooks/         # Exploration
â”œâ”€â”€ src/              # Source code
â”œâ”€â”€ visuals/          # Output images
â”œâ”€â”€ docs/             # Documentation
â””â”€â”€ requirements.txt   # Dependencies
```

### Documentation Template

Your README should include:
1. Project title and description
2. Data source and collection method
3. Key findings/insights
4. Technical requirements
5. How to run the code
6. Future improvements

## Common Pitfalls to Avoid

### Design Mistakes
- ðŸš« Too many colors
- ðŸš« 3D charts for 2D data  
- ðŸš« Truncated y-axes
- ðŸš« Overcrowded layouts
- ðŸš« Decoration over function

### Technical Mistakes
- ðŸš« Not handling missing data
- ðŸš« Hardcoded values
- ðŸš« No error handling
- ðŸš« Poor performance with large data
- ðŸš« Not testing edge cases

### Process Mistakes
- ðŸš« Starting coding too early
- ðŸš« Not iterating on designs
- ðŸš« Ignoring user feedback
- ðŸš« Last-minute deployment
- ðŸš« Poor time management

## Inspiration and Examples

### Award-Winning Projects
- [Information is Beautiful Awards](https://www.informationisbeautifulawards.com/)
- [Kantar Awards Showcase](https://www.informationisbeautifulawards.com/showcase)
- [D3.js Gallery](https://observablehq.com/@d3/gallery)

### Student Project Examples
- [Previous years' showcases](#) (coming soon)
- [Template repositories](#)

## Final Checklist

Before submission:
- [ ] Code runs without errors
- [ ] Documentation is complete
- [ ] Visualizations are accessible
- [ ] Story is clear and compelling
- [ ] All sources are cited
- [ ] Tested on different devices
- [ ] Peer feedback incorporated
- [ ] Repository is clean and organized

::: {.callout-tip}
## Remember
The best visualizations are rarely the first attempt. Iterate, get feedback, and refine!
:::

Need help? Visit office hours or post on the course forum!